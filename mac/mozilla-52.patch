diff --git a/browser/app/nsBrowserApp.cpp b/browser/app/nsBrowserApp.cpp
--- a/browser/app/nsBrowserApp.cpp
+++ b/browser/app/nsBrowserApp.cpp
@@ -170,9 +170,12 @@ static int do_main(int argc, char* argv[
   nsresult rv;
   uint32_t mainFlags = 0;
 
-  // Allow firefox.exe to launch XULRunner apps via -app <application.ini>
-  // Note that -app must be the *first* argument.
-  const char *appDataFile = getenv("XUL_APP_FILE");
+  char appDataFile[MAXPATHLEN];
+  rv = BinaryPath::GetApplicationIni(appDataFile);
+  if (NS_FAILED(rv)) {
+    Output("Couldn't find application.ini.\n");
+    return 255;
+  }
   if (appDataFile && *appDataFile) {
     rv = XRE_GetFileFromPath(appDataFile, getter_AddRefs(appini));
     if (NS_FAILED(rv)) {
diff --git a/xpcom/build/BinaryPath.h b/xpcom/build/BinaryPath.h
--- a/xpcom/build/BinaryPath.h
+++ b/xpcom/build/BinaryPath.h
@@ -84,6 +84,46 @@ private:
     return rv;
   }
 
+  static nsresult GetApplicationIni(char aResult[MAXPATHLEN])
+  {
+    // Works even if we're not bundled.
+    CFBundleRef appBundle = CFBundleGetMainBundle();
+    if (!appBundle) {
+      return NS_ERROR_FAILURE;
+    }
+
+    CFStringRef iniFilename = CFSTR("application.ini");
+    CFURLRef iniURL = CFBundleCopyResourceURL(appBundle, iniFilename, NULL, NULL);
+    if (!iniURL) {
+      return NS_ERROR_FAILURE;
+    }
+
+    nsresult rv;
+    if (CFURLGetFileSystemRepresentation(iniURL, false, (UInt8*)aResult,
+                                         MAXPATHLEN)) {
+      // Sanitize path in case the app was launched from Terminal via
+      // './firefox' for example.
+      size_t readPos = 0;
+      size_t writePos = 0;
+      while (aResult[readPos] != '\0') {
+        if (aResult[readPos] == '.' && aResult[readPos + 1] == '/') {
+          readPos += 2;
+        } else {
+          aResult[writePos] = aResult[readPos];
+          readPos++;
+          writePos++;
+        }
+      }
+      aResult[writePos] = '\0';
+      rv = NS_OK;
+    } else {
+      rv = NS_ERROR_FAILURE;
+    }
+
+    CFRelease(iniURL);
+    return rv;
+  }
+
 #elif defined(ANDROID)
   static nsresult Get(const char* argv0, char aResult[MAXPATHLEN])
   {
